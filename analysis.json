{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "MultiChart",
      "description": " ",
      "summary": "",
      "sourceRange": {
        "file": "projection/multi-project.html",
        "start": {
          "line": 102,
          "column": 4
        },
        "end": {
          "line": 102,
          "column": 50
        }
      },
      "namespaces": [
        {
          "name": "MultiChart.mixin",
          "description": " ",
          "summary": "",
          "sourceRange": {
            "file": "projection/d3-projection-mixin.html",
            "start": {
              "line": 80,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 58
            }
          },
          "mixins": [
            {
              "description": "##  MultiGeoDrawable\n\na mixin fo multi geo drawable. It will mwke sure we redraw when data is set.",
              "summary": "",
              "path": "drawable/multi-drawable-geo-mixin.html",
              "properties": [
                {
                  "name": "drawableData",
                  "type": "?",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 46,
                      "column": 5
                    },
                    "end": {
                      "line": 48,
                      "column": 6
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "readOnly": true
                    }
                  }
                },
                {
                  "name": "geoData",
                  "type": "Object | null | undefined",
                  "description": "`geoData` data to use for drawing geo chart.\nwe need another parameter as `data` because some chart - like chloropeth - need both geo path data\nand value data to display on the chart.",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 23,
                      "column": 9
                    },
                    "end": {
                      "line": 25,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Object"
                    }
                  }
                },
                {
                  "name": "logPrefix",
                  "type": "string | null | undefined",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 9
                    },
                    "end": {
                      "line": 31,
                      "column": 10
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  },
                  "defaultValue": "\"[multi-geo]\""
                }
              ],
              "methods": [
                {
                  "name": "_observeGeoData",
                  "description": "",
                  "privacy": "protected",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 5
                    },
                    "end": {
                      "line": 44,
                      "column": 6
                    }
                  },
                  "metadata": {},
                  "params": [],
                  "return": {
                    "type": "void"
                  }
                },
                {
                  "name": "setData",
                  "description": "",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 50,
                      "column": 5
                    },
                    "end": {
                      "line": 59,
                      "column": 6
                    }
                  },
                  "metadata": {},
                  "params": [
                    {
                      "name": "data"
                    }
                  ],
                  "return": {
                    "type": "void"
                  }
                }
              ],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 1
                },
                "end": {
                  "line": 61,
                  "column": 3
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.MultiGeoDrawable",
              "attributes": [
                {
                  "name": "geo-data",
                  "description": "`geoData` data to use for drawing geo chart.\nwe need another parameter as `data` because some chart - like chloropeth - need both geo path data\nand value data to display on the chart.",
                  "sourceRange": {
                    "start": {
                      "line": 23,
                      "column": 9
                    },
                    "end": {
                      "line": 25,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "Object | null | undefined"
                },
                {
                  "name": "log-prefix",
                  "description": "",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 9
                    },
                    "end": {
                      "line": 31,
                      "column": 10
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            },
            {
              "description": "##  D3Projection\n\na mixin holding d3-projection properties",
              "summary": "",
              "path": "projection/d3-projection-mixin.html",
              "properties": [
                {
                  "name": "projectionType",
                  "type": "string | null | undefined",
                  "description": "`projectionType` the type of the projection, one of `geoAlbers`,`geoAlbersUsa`,`geoAzimuthalEqualArea`,`geoAzimuthalEquidistant`,`geoConicConformal`,`geoConicEqualArea`,`geoConicEquidistant`,`geoEquirectangular`,`geoGnomonic`,`geoProjection`,`geoMercator`,`geoOrthographic`,`geoStereographic`,`geoTransverseMercator`",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "String"
                    }
                  }
                },
                {
                  "name": "clipAngle",
                  "type": "number | null | undefined",
                  "description": "[`clipAngle`](https:github.com/d3/d3-geo#projection_clipAngle)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "clipExtent",
                  "type": "Array | null | undefined",
                  "description": "[`clipExtent`](https:github.com/d3/d3-geo#projection_clipExtent)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 34,
                      "column": 10
                    },
                    "end": {
                      "line": 36,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "center",
                  "type": "Array | null | undefined",
                  "description": "[`center`](https:github.com/d3/d3-geo#projection_center)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 44,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Array"
                    }
                  }
                },
                {
                  "name": "rotate",
                  "type": "number | null | undefined",
                  "description": "[`rotate`](https:github.com/d3/d3-geo#projection_rotate)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 10
                    },
                    "end": {
                      "line": 51,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "precision",
                  "type": "number | null | undefined",
                  "description": "[`precision`](https:github.com/d3/d3-geo#projection_precision)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 55,
                      "column": 10
                    },
                    "end": {
                      "line": 58,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Number"
                    }
                  }
                },
                {
                  "name": "translate",
                  "type": "Array | null | undefined",
                  "description": "[`translate`](https:github.com/d3/d3-geo#projection_translate)",
                  "privacy": "public",
                  "sourceRange": {
                    "start": {
                      "line": 63,
                      "column": 10
                    },
                    "end": {
                      "line": 66,
                      "column": 11
                    }
                  },
                  "metadata": {
                    "polymer": {
                      "notify": true,
                      "attributeType": "Array"
                    }
                  }
                }
              ],
              "methods": [],
              "staticMethods": [],
              "demos": [],
              "metadata": {},
              "sourceRange": {
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 71,
                  "column": 4
                }
              },
              "privacy": "public",
              "name": "MultiChart.mixin.D3Projection",
              "attributes": [
                {
                  "name": "projection-type",
                  "description": "`projectionType` the type of the projection, one of `geoAlbers`,`geoAlbersUsa`,`geoAzimuthalEqualArea`,`geoAzimuthalEquidistant`,`geoConicConformal`,`geoConicEqualArea`,`geoConicEquidistant`,`geoEquirectangular`,`geoGnomonic`,`geoProjection`,`geoMercator`,`geoOrthographic`,`geoStereographic`,`geoTransverseMercator`",
                  "sourceRange": {
                    "start": {
                      "line": 21,
                      "column": 10
                    },
                    "end": {
                      "line": 23,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "string | null | undefined"
                },
                {
                  "name": "clip-angle",
                  "description": "[`clipAngle`](https:github.com/d3/d3-geo#projection_clipAngle)",
                  "sourceRange": {
                    "start": {
                      "line": 28,
                      "column": 10
                    },
                    "end": {
                      "line": 30,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "clip-extent",
                  "description": "[`clipExtent`](https:github.com/d3/d3-geo#projection_clipExtent)",
                  "sourceRange": {
                    "start": {
                      "line": 34,
                      "column": 10
                    },
                    "end": {
                      "line": 36,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "center",
                  "description": "[`center`](https:github.com/d3/d3-geo#projection_center)",
                  "sourceRange": {
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 44,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                },
                {
                  "name": "rotate",
                  "description": "[`rotate`](https:github.com/d3/d3-geo#projection_rotate)",
                  "sourceRange": {
                    "start": {
                      "line": 48,
                      "column": 10
                    },
                    "end": {
                      "line": 51,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "precision",
                  "description": "[`precision`](https:github.com/d3/d3-geo#projection_precision)",
                  "sourceRange": {
                    "start": {
                      "line": 55,
                      "column": 10
                    },
                    "end": {
                      "line": 58,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "number | null | undefined"
                },
                {
                  "name": "translate",
                  "description": "[`translate`](https:github.com/d3/d3-geo#projection_translate)",
                  "sourceRange": {
                    "start": {
                      "line": 63,
                      "column": 10
                    },
                    "end": {
                      "line": 66,
                      "column": 11
                    }
                  },
                  "metadata": {},
                  "type": "Array | null | undefined"
                }
              ],
              "events": [],
              "styling": {
                "cssVariables": [],
                "selectors": []
              },
              "slots": []
            }
          ]
        }
      ],
      "elements": [
        {
          "description": "## MultiDrawableFeature\n\n`<multi-drawable-feature>` polymer elements responsible for drawing choropleth area in a geo-chart\n\n### Example\n```html\n   <!-- fetch topojson features from  -->\n   <topojson-feature id=\"feature\" feature=\"{{feature}}\" data=\"{{geometries}}\" name=\"countries\" url=\"worldSimplify01.json\"></topojson-feature>\n   <!-- configure transition for this chart  -->\n   <d3-transition transition=\"{{transition}}\" duration=\"500\"></d3-transition>\n   <!-- a multi-container-geo will expose path and projection -->\n   <multi-container-geo\n     id=\"chart\"\n     projection=\"{{projection}}\"\n     path=\"{{path}}\"\n     projection-type=\"[[projectionType]]\"\n     rotate=\"[[rotate]]\"\n     translate=\"[[translate]]\"\n     scale=\"[[scale]]\"\n     >\n       <!-- group of geo elements. When feature changes, contained elements will redraw -->\n       <multi-container-g data=\"[[feature]]\" >\n         <!-- draw features with projected to projection -->\n         <multi-drawable-feature transition=\"[[transition]]\" projection=\"[[projection]]\" path=\"[[path]]\">\n         </multi-drawable-feature>\n       </multi-container-g>\n     </multi-container-geo>\n```\n\n### Styling\n`<multi-drawable-feature>` provides the following custom properties and mixins\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--multi-drawable-feature-stroke-color` | stroke color for features | `--secondary-text-color` or grey\n`--multi-drawable-feature-fill-color` | fill color for features | none\n`--multi-drawable-feature` | Mixin applied to features | `{}`",
          "summary": "",
          "path": "drawable/multi-drawable-feature.html",
          "properties": [
            {
              "name": "drawableData",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 46,
                  "column": 5
                },
                "end": {
                  "line": 48,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "geoData",
              "type": "Object | null | undefined",
              "description": "`geoData` data to use for drawing geo chart.\nwe need another parameter as `data` because some chart - like chloropeth - need both geo path data\nand value data to display on the chart.",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 23,
                  "column": 9
                },
                "end": {
                  "line": 25,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-geo]\"",
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "shapeName",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 132,
                  "column": 6
                },
                "end": {
                  "line": 134,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "shapeClass",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 136,
                  "column": 6
                },
                "end": {
                  "line": 138,
                  "column": 7
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "path",
              "type": "Function | null | undefined",
              "description": "`path` the [path](https://github.com/d3/d3-geo#geoPath) generator function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 86,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "attrs",
              "type": "Object | null | undefined",
              "description": "`attrs` default attributes to be set on the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 96,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "null"
            },
            {
              "name": "autoFit",
              "type": "boolean | null | undefined",
              "description": "`autoFit` if true, will recalculate the projectoin so as to fit features\nwithin chart size.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Boolean"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_observeGeoData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 41,
                  "column": 5
                },
                "end": {
                  "line": 44,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 50,
                  "column": 5
                },
                "end": {
                  "line": 59,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "preDraw",
              "description": "`preDraw`  prevents to draw features if we miss path",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 111,
                  "column": 6
                },
                "end": {
                  "line": 130,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 140,
                  "column": 6
                },
                "end": {
                  "line": 162,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "onResize",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 6
                },
                "end": {
                  "line": 167,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "doFit",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 169,
                  "column": 6
                },
                "end": {
                  "line": 177,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-feature-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 178,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawableFeature",
          "attributes": [
            {
              "name": "geo-data",
              "description": "`geoData` data to use for drawing geo chart.\nwe need another parameter as `data` because some chart - like chloropeth - need both geo path data\nand value data to display on the chart.",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 23,
                  "column": 9
                },
                "end": {
                  "line": 25,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "log-prefix",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "path",
              "description": "`path` the [path](https://github.com/d3/d3-geo#geoPath) generator function",
              "sourceRange": {
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 86,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "attrs",
              "description": "`attrs` default attributes to be set on the chart",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 96,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "auto-fit",
              "description": "`autoFit` if true, will recalculate the projectoin so as to fit features\nwithin chart size.",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 10
                },
                "end": {
                  "line": 104,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-feature",
          "mixins": [
            "MultiChart.mixin.MultiGeoDrawable"
          ]
        },
        {
          "description": "## MultiDrawableChoropleth\n\n`<multi-drawable-choropleth>` polymer elements responsible for drawing choropleth area in a geo-chart\n\n### Example\n ```html\n    <topojson-feature feature=\"{{feature}}\" data=\"{{geometries}}\" name=\"counties\" url=\"us.json\"></topojson-feature>\n   <!-- get a topojson mesh for states  -->\n   <topojson-mesh mesh=\"{{mesh}}\" data=\"[[geometries]]\" name=\"states\"></topojson-mesh>\n   <!-- a multi-container-geo will expose path and projection -->\n   <multi-container-geo id=\"chart\" enable-zoom projection=\"{{projection}}\" path=\"{{path}}\" projection-type=\"[[projectionType]]\" scale=\"{{scale}}\">\n       <!-- group of geo elements. When choropleth changes, contained elements will redraw -->\n       <multi-container-g>\n\n         <!-- draw choropleths with projected to projection -->\n         <multi-drawable-choropleth data=\"[[data]]\" auto-fit geo-data=\"[[feature]]\" path=\"[[path]]\" attrs=\"[[choroplethAttrs]]\" scale-type=\"scaleQuantize\" domain=\"[[colorDomain]]\" range=\"[[colorRange]]\" color-scale=\"{{colorScale}}\" value-accessor-path=\"+rate\" key-accessor-path=\"id\"></multi-drawable-choropleth>\n\n         <!-- show US States -->\n         <multi-drawable-path path=\"[[path]]\" attrs=\"[[meshAttrs]]\" geo-data=\"[[mesh]]\"></multi-drawable-path>\n       </multi-container-g>\n\n       <!-- display a legend -->\n       <multi-legend scale=\"[[colorScale]]\" padding=\"10\" title=\"Unemployment Rate\" labels=\"[[labels]]\" label-format=\".0%\" position=\"right\"> </multi-legend>\n     </multi-container-geo>\n ```",
          "summary": "",
          "path": "drawable/multi-drawable-choropleth.html",
          "properties": [
            {
              "name": "colorScale",
              "type": "Function | null | undefined",
              "description": "`colorScale` scale to use for the choropleth",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "valueAccessorPath",
              "type": "string | null | undefined",
              "description": "`valueAccessorPath` path for computing the `valueAccessor` function\na value of ´key´ will generate  an accessor function like ´function(d) {return d.key}´\na value of ´+value.count´ will generate  an accessor function like ´function(d) {return +d.value.count}´",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 10
                },
                "end": {
                  "line": 85,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"key\""
            },
            {
              "name": "valueAccessor",
              "type": "Function | null | undefined",
              "description": "`valueAccessor` the value accessor function\nexample function : `d => {return +d.count}`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "keyAccessorPath",
              "type": "string | null | undefined",
              "description": "`keyAccessorPath` path for computing the `keyAccessor` function\na key of ´key´ will generate  an accessor function like ´function(d) {return d.key}´\na key of ´+key.count´ will generate  an accessor function like ´function(d) {return +d.key.count}´",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"key\""
            },
            {
              "name": "keyAccessor",
              "type": "Function | null | undefined",
              "description": "`keyAccessor` the value accessor function\nexample function : `d => {return +d.count}`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 111,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_observeData",
              "description": "`_observeData` will create a map for easy reference while applying the colorScale",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 125,
                  "column": 6
                },
                "end": {
                  "line": 150,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 152,
                  "column": 6
                },
                "end": {
                  "line": 160,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-choropleth-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawableChoropleth",
          "attributes": [
            {
              "name": "color-scale",
              "description": "`colorScale` scale to use for the choropleth",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "value-accessor-path",
              "description": "`valueAccessorPath` path for computing the `valueAccessor` function\na value of ´key´ will generate  an accessor function like ´function(d) {return d.key}´\na value of ´+value.count´ will generate  an accessor function like ´function(d) {return +d.value.count}´",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 10
                },
                "end": {
                  "line": 85,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "value-accessor",
              "description": "`valueAccessor` the value accessor function\nexample function : `d => {return +d.count}`",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "key-accessor-path",
              "description": "`keyAccessorPath` path for computing the `keyAccessor` function\na key of ´key´ will generate  an accessor function like ´function(d) {return d.key}´\na key of ´+key.count´ will generate  an accessor function like ´function(d) {return +d.key.count}´",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "key-accessor",
              "description": "`keyAccessor` the value accessor function\nexample function : `d => {return +d.count}`",
              "sourceRange": {
                "start": {
                  "line": 109,
                  "column": 10
                },
                "end": {
                  "line": 111,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "color-scale-changed",
              "description": "Fired when the `colorScale` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-choropleth",
          "mixins": [
            "MultiChart.mixin.D3ScaleProperty"
          ]
        },
        {
          "description": "## MultiDrawablePath\n\n`<multi-drawable-path>` draw a line from a geo path in a given projection\n\n### Styling\n`<multi-drawable-feature>` provides the following custom properties and mixins\nfor styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--multi-drawable-feature-stroke-color` | stroke color for features | `--secondary-text-color` or grey\n`--multi-drawable-feature-fill-color` | fill color for features | none\n`--multi-drawable-feature` | Mixin applied to features | `{}`",
          "summary": "",
          "path": "drawable/multi-drawable-path.html",
          "properties": [
            {
              "name": "drawableData",
              "type": "?",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 46,
                  "column": 5
                },
                "end": {
                  "line": 48,
                  "column": 6
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "geoData",
              "type": "Object | null | undefined",
              "description": "`geoData` data to use for drawing geo chart.\nwe need another parameter as `data` because some chart - like chloropeth - need both geo path data\nand value data to display on the chart.",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 23,
                  "column": 9
                },
                "end": {
                  "line": 25,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "logPrefix",
              "type": "string | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"[multi-geo]\"",
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "path",
              "type": "Function | null | undefined",
              "description": "`path` the [path](https://github.com/d3/d3-geo#geoPath) generator function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 56,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "attrs",
              "type": "Object | null | undefined",
              "description": "`attrs` default attributes to be set on the chart",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "null"
            },
            {
              "name": "registerOrder",
              "type": "number | null | undefined",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "defaultValue": "50"
            }
          ],
          "methods": [
            {
              "name": "_observeGeoData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 41,
                  "column": 5
                },
                "end": {
                  "line": 44,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "setData",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 50,
                  "column": 5
                },
                "end": {
                  "line": 59,
                  "column": 6
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "preDraw",
              "description": "`preDraw`  prevents to draw features if we miss path",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 77,
                  "column": 6
                },
                "end": {
                  "line": 88,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            },
            {
              "name": "draw",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 6
                },
                "end": {
                  "line": 103,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiDrawablePath",
          "attributes": [
            {
              "name": "geo-data",
              "description": "`geoData` data to use for drawing geo chart.\nwe need another parameter as `data` because some chart - like chloropeth - need both geo path data\nand value data to display on the chart.",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 23,
                  "column": 9
                },
                "end": {
                  "line": 25,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "Object | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "log-prefix",
              "description": "",
              "sourceRange": {
                "file": "multi-drawable-geo-mixin.html",
                "start": {
                  "line": 28,
                  "column": 9
                },
                "end": {
                  "line": 31,
                  "column": 10
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.MultiGeoDrawable"
            },
            {
              "name": "path",
              "description": "`path` the [path](https://github.com/d3/d3-geo#geoPath) generator function",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 10
                },
                "end": {
                  "line": 56,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "attrs",
              "description": "`attrs` default attributes to be set on the chart",
              "sourceRange": {
                "start": {
                  "line": 61,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "register-order",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 71,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-drawable-path",
          "mixins": [
            "MultiChart.mixin.MultiGeoDrawable"
          ]
        },
        {
          "description": "## D3Projection\n\n`<d3-projection>` a webcompobent for wrapping geo projection as in [d3-geo](https://github.com/d3/d3-geo/blob/master/README.md#_projections)\nIt will expose `projection`.",
          "summary": "",
          "path": "projection/d3-projection.html",
          "properties": [
            {
              "name": "projectionType",
              "type": "string | null | undefined",
              "description": "`projectionType` the type of the projection, one of `geoAlbers`,`geoAlbersUsa`,`geoAzimuthalEqualArea`,`geoAzimuthalEquidistant`,`geoConicConformal`,`geoConicEqualArea`,`geoConicEquidistant`,`geoEquirectangular`,`geoGnomonic`,`geoProjection`,`geoMercator`,`geoOrthographic`,`geoStereographic`,`geoTransverseMercator`",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "clipAngle",
              "type": "number | null | undefined",
              "description": "[`clipAngle`](https:github.com/d3/d3-geo#projection_clipAngle)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "clipExtent",
              "type": "Array | null | undefined",
              "description": "[`clipExtent`](https:github.com/d3/d3-geo#projection_clipExtent)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 34,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "[`center`](https:github.com/d3/d3-geo#projection_center)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "rotate",
              "type": "number | null | undefined",
              "description": "[`rotate`](https:github.com/d3/d3-geo#projection_rotate)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 48,
                  "column": 10
                },
                "end": {
                  "line": 51,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "precision",
              "type": "number | null | undefined",
              "description": "[`precision`](https:github.com/d3/d3-geo#projection_precision)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 55,
                  "column": 10
                },
                "end": {
                  "line": 58,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "translate",
              "type": "Array | null | undefined",
              "description": "[`translate`](https:github.com/d3/d3-geo#projection_translate)",
              "privacy": "public",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "projection",
              "type": "Function | null | undefined",
              "description": "`projection` the [projection](https://github.com/d3/d3-geo#projection) generator function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 58,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "readOnly": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "scale",
              "type": "number | null | undefined",
              "description": "[`scale`](https:github.com/d3/d3-geo#projection_scale)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Number"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_observeType",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 6
                },
                "end": {
                  "line": 98,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "projectionType"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "syncProperties",
              "description": "`syncProperties` will sync component properties with projections",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 103,
                  "column": 6
                },
                "end": {
                  "line": 112,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "fitExtent",
              "description": "[`fitExtent`](https://github.com/d3/d3-geo#projection_fitExtent) Sets the projection’s scale and translate to fit the specified GeoJSON object in the center of the given `extent`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 117,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "extent"
                },
                {
                  "name": "object"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "fitSize",
              "description": "[`fitSize`](https://github.com/d3/d3-geo#projection_fitSize) A convenience method for projection.fitExtent where the top-left corner of the extent is `[0,0]`.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 126,
                  "column": 6
                },
                "end": {
                  "line": 130,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "size"
                },
                {
                  "name": "object"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "invert",
              "description": "[`invert`](https://github.com/d3/d3-geo#projection_invert) Returns a new array [longitude, latitude] in degrees representing the unprojected point of the given projected point.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 135,
                  "column": 6
                },
                "end": {
                  "line": 139,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "point"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.D3Projection",
          "attributes": [
            {
              "name": "projection-type",
              "description": "`projectionType` the type of the projection, one of `geoAlbers`,`geoAlbersUsa`,`geoAzimuthalEqualArea`,`geoAzimuthalEquidistant`,`geoConicConformal`,`geoConicEqualArea`,`geoConicEquidistant`,`geoEquirectangular`,`geoGnomonic`,`geoProjection`,`geoMercator`,`geoOrthographic`,`geoStereographic`,`geoTransverseMercator`",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "clip-angle",
              "description": "[`clipAngle`](https:github.com/d3/d3-geo#projection_clipAngle)",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "clip-extent",
              "description": "[`clipExtent`](https:github.com/d3/d3-geo#projection_clipExtent)",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 34,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "center",
              "description": "[`center`](https:github.com/d3/d3-geo#projection_center)",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "rotate",
              "description": "[`rotate`](https:github.com/d3/d3-geo#projection_rotate)",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 48,
                  "column": 10
                },
                "end": {
                  "line": 51,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "precision",
              "description": "[`precision`](https:github.com/d3/d3-geo#projection_precision)",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 55,
                  "column": 10
                },
                "end": {
                  "line": 58,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "translate",
              "description": "[`translate`](https:github.com/d3/d3-geo#projection_translate)",
              "sourceRange": {
                "file": "d3-projection-mixin.html",
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "projection",
              "description": "`projection` the [projection](https://github.com/d3/d3-geo#projection) generator function",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 58,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "scale",
              "description": "[`scale`](https:github.com/d3/d3-geo#projection_scale)",
              "sourceRange": {
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "projection-changed",
              "description": "Fired when the `projection` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "scale-changed",
              "description": "Fired when the `scale` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-projection",
          "mixins": [
            "MultiChart.mixin.D3Projection",
            "MultiChart.mixin.ConfigHelper"
          ]
        },
        {
          "description": "## D3GeoPath\n\n`<d3-geo-path>` a wrapper for geographic path generator with the default settings as in [d3.geoPath](https://github.com/d3/d3-geo#geoPath)",
          "summary": "",
          "path": "d3-geo/d3-geo-path.html",
          "properties": [
            {
              "name": "path",
              "type": "Function | null | undefined",
              "description": "`path` the [path](https://github.com/d3/d3-geo#geoPath) generator function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 27,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "projection",
              "type": "Function | null | undefined",
              "description": "[`projection`]((https://github.com/d3/d3-geo#path_projection)) to be applied to the path",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 10
                },
                "end": {
                  "line": 42,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "context",
              "type": "Function | null | undefined",
              "description": "[`context`](https://github.com/d3/d3-geo#path_context) to be applied to the path",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "area",
              "description": "[`area`](https://github.com/d3/d3-geo#path_area) returns the projected planar area for the specified GeoJSON `object`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 6
                },
                "end": {
                  "line": 64,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                }
              ]
            },
            {
              "name": "bounds",
              "description": "[`bounds`](https://github.com/d3/d3-geo#path_bounds) returns the projected planar bounding box for the specified GeoJSON `object`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 6
                },
                "end": {
                  "line": 71,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                }
              ]
            },
            {
              "name": "centroid",
              "description": "[`centroid`](https://github.com/d3/d3-geo#path_centroid) returns the projected planar centroid for the specified GeoJSON `object`",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 6
                },
                "end": {
                  "line": 78,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "object"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.D3GeoPath",
          "attributes": [
            {
              "name": "path",
              "description": "`path` the [path](https://github.com/d3/d3-geo#geoPath) generator function",
              "sourceRange": {
                "start": {
                  "line": 27,
                  "column": 10
                },
                "end": {
                  "line": 35,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "projection",
              "description": "[`projection`]((https://github.com/d3/d3-geo#path_projection)) to be applied to the path",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 10
                },
                "end": {
                  "line": 42,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "context",
              "description": "[`context`](https://github.com/d3/d3-geo#path_context) to be applied to the path",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 10
                },
                "end": {
                  "line": 49,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "path-changed",
              "description": "Fired when the `path` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "d3-geo-path",
          "mixins": [
            "MultiChart.mixin.ConfigHelper"
          ]
        },
        {
          "description": "## MultiChartGeo\n\n`<multi-container-geo>` a container for geographical chart. It exposes the current geo projection",
          "summary": "",
          "path": "container/multi-container-geo.html",
          "properties": [
            {
              "name": "projectionType",
              "type": "string | null | undefined",
              "description": "`projectionType` the type of the projection, one of `geoAlbers`,`geoAlbersUsa`,`geoAzimuthalEqualArea`,`geoAzimuthalEquidistant`,`geoConicConformal`,`geoConicEqualArea`,`geoConicEquidistant`,`geoEquirectangular`,`geoGnomonic`,`geoProjection`,`geoMercator`,`geoOrthographic`,`geoStereographic`,`geoTransverseMercator`",
              "privacy": "public",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "clipAngle",
              "type": "number | null | undefined",
              "description": "[`clipAngle`](https:github.com/d3/d3-geo#projection_clipAngle)",
              "privacy": "public",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "clipExtent",
              "type": "Array | null | undefined",
              "description": "[`clipExtent`](https:github.com/d3/d3-geo#projection_clipExtent)",
              "privacy": "public",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 34,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "center",
              "type": "Array | null | undefined",
              "description": "[`center`](https:github.com/d3/d3-geo#projection_center)",
              "privacy": "public",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "rotate",
              "type": "number | null | undefined",
              "description": "[`rotate`](https:github.com/d3/d3-geo#projection_rotate)",
              "privacy": "public",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 48,
                  "column": 10
                },
                "end": {
                  "line": 51,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "precision",
              "type": "number | null | undefined",
              "description": "[`precision`](https:github.com/d3/d3-geo#projection_precision)",
              "privacy": "public",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 55,
                  "column": 10
                },
                "end": {
                  "line": 58,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Number"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "translate",
              "type": "Array | null | undefined",
              "description": "[`translate`](https:github.com/d3/d3-geo#projection_translate)",
              "privacy": "public",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              },
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "projection",
              "type": "Function | null | undefined",
              "description": "`projection` the [projection](https://github.com/d3/d3-geo#projection) generator function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 10
                },
                "end": {
                  "line": 68,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "scale",
              "type": "number | null | undefined",
              "description": "[`scale`](https:github.com/d3/d3-geo#projection_scale)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Number"
                }
              }
            },
            {
              "name": "path",
              "type": "Function | null | undefined",
              "description": "`path` the [path](https://github.com/d3/d3-geo#geoPath) generator function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 10
                },
                "end": {
                  "line": 84,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "context",
              "type": "Function | null | undefined",
              "description": "[`context`](https://github.com/d3/d3-geo#path_context) to be applied to the path",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 10
                },
                "end": {
                  "line": 91,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "margin",
              "type": "Object | null | undefined",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 95,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              },
              "defaultValue": "{\"top\":0,\"right\":0,\"bottom\":0,\"left\":0}"
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 109,
                  "column": 6
                },
                "end": {
                  "line": 112,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_onRefresh",
              "description": "`_onRefresh` usualy happens when projection is changed,\nwe need to adjust inner drawable like multi-drawable-feature\nNote(cg): we are not calling this.$.chart._onRefresh because we need to bypass shallNotify test",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 6
                },
                "end": {
                  "line": 121,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [
            {
              "url": "index.html#multi-choropleth-demo",
              "description": ""
            },
            {
              "url": "index.html#multi-feature-demo",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 4
            },
            "end": {
              "line": 122,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiChartGeo",
          "attributes": [
            {
              "name": "projection-type",
              "description": "`projectionType` the type of the projection, one of `geoAlbers`,`geoAlbersUsa`,`geoAzimuthalEqualArea`,`geoAzimuthalEquidistant`,`geoConicConformal`,`geoConicEqualArea`,`geoConicEquidistant`,`geoEquirectangular`,`geoGnomonic`,`geoProjection`,`geoMercator`,`geoOrthographic`,`geoStereographic`,`geoTransverseMercator`",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 21,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "clip-angle",
              "description": "[`clipAngle`](https:github.com/d3/d3-geo#projection_clipAngle)",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 30,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "clip-extent",
              "description": "[`clipExtent`](https:github.com/d3/d3-geo#projection_clipExtent)",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 34,
                  "column": 10
                },
                "end": {
                  "line": 36,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "center",
              "description": "[`center`](https:github.com/d3/d3-geo#projection_center)",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 41,
                  "column": 10
                },
                "end": {
                  "line": 44,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "rotate",
              "description": "[`rotate`](https:github.com/d3/d3-geo#projection_rotate)",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 48,
                  "column": 10
                },
                "end": {
                  "line": 51,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "precision",
              "description": "[`precision`](https:github.com/d3/d3-geo#projection_precision)",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 55,
                  "column": 10
                },
                "end": {
                  "line": 58,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "translate",
              "description": "[`translate`](https:github.com/d3/d3-geo#projection_translate)",
              "sourceRange": {
                "file": "../projection/d3-projection-mixin.html",
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 66,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined",
              "inheritedFrom": "MultiChart.mixin.D3Projection"
            },
            {
              "name": "projection",
              "description": "`projection` the [projection](https://github.com/d3/d3-geo#projection) generator function",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 10
                },
                "end": {
                  "line": 68,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "scale",
              "description": "[`scale`](https:github.com/d3/d3-geo#projection_scale)",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 10
                },
                "end": {
                  "line": 76,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number | null | undefined"
            },
            {
              "name": "path",
              "description": "`path` the [path](https://github.com/d3/d3-geo#geoPath) generator function",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 10
                },
                "end": {
                  "line": 84,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "context",
              "description": "[`context`](https://github.com/d3/d3-geo#path_context) to be applied to the path",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 10
                },
                "end": {
                  "line": 91,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "margin",
              "description": "`margin` applied to svg container (not css margin, wich can also be applied as per normal css rules)",
              "sourceRange": {
                "start": {
                  "line": 95,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "projection-changed",
              "description": "Fired when the `projection` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "scale-changed",
              "description": "Fired when the `scale` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "path-changed",
              "description": "Fired when the `path` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "header",
              "range": {
                "start": {
                  "line": 32,
                  "column": 6
                },
                "end": {
                  "line": 32,
                  "column": 47
                }
              }
            },
            {
              "description": "",
              "name": "",
              "range": {
                "start": {
                  "line": 33,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 19
                }
              }
            },
            {
              "description": "",
              "name": "footer",
              "range": {
                "start": {
                  "line": 34,
                  "column": 6
                },
                "end": {
                  "line": 34,
                  "column": 47
                }
              }
            }
          ],
          "tagname": "multi-container-geo",
          "mixins": [
            "MultiChart.mixin.D3Projection"
          ]
        },
        {
          "description": "## TopojsonFeature\n\n`<topojson-feature>` a wrapper around [topojson feature](https://github.com/topojson/topojson-client/blob/master/README.md#feature)\nexposes geo feature from an url",
          "summary": "",
          "path": "topojson/topojson-feature.html",
          "properties": [
            {
              "name": "feature",
              "type": "Array | null | undefined",
              "description": "`feature` the GeoJSON Feature or FeatureCollection to be exposed by this component",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 32,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "url",
              "type": "string | null | undefined",
              "description": "`url` url to use for fetching geo mesh data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "data",
              "type": "Object | null | undefined",
              "description": "`data` topojson or geojson object. It is either retrieved iron-ajax or passed as an argument",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "geoType",
              "type": "string | null | undefined",
              "description": "`geoType` the type of data object (topojson or geojson)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"topojson\""
            },
            {
              "name": "name",
              "type": "string | null | undefined",
              "description": "`name` the name of the property to extract from the geo data object",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "handleAs",
              "type": "string | null | undefined",
              "description": "[`handleAs`](https://elements.polymer-project.org/elements/iron-ajax#property-handleAs)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"json\""
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` the filter to use for filtering features\nex: function(f) {return f.id !== 10} // remove antartic from a world map",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 10
                },
                "end": {
                  "line": 79,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "defaultValue": "null"
            },
            {
              "name": "forEach",
              "type": "Function | null | undefined",
              "description": "`forEach` a function that will run for each feature\nex: function(f) {return f.properties.id = lookup(f.id) } // take lookup code",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 10
                },
                "end": {
                  "line": 88,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              },
              "defaultValue": "null"
            }
          ],
          "methods": [
            {
              "name": "_observeData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 95,
                  "column": 6
                },
                "end": {
                  "line": 119,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "name"
                },
                {
                  "name": "geoType"
                },
                {
                  "name": "filter"
                },
                {
                  "name": "forEach"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "Polymer.Element",
          "name": "MultiChart.TopojsonFeature",
          "attributes": [
            {
              "name": "feature",
              "description": "`feature` the GeoJSON Feature or FeatureCollection to be exposed by this component",
              "sourceRange": {
                "start": {
                  "line": 29,
                  "column": 10
                },
                "end": {
                  "line": 32,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "url",
              "description": "`url` url to use for fetching geo mesh data.",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 39,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "data",
              "description": "`data` topojson or geojson object. It is either retrieved iron-ajax or passed as an argument",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 10
                },
                "end": {
                  "line": 47,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "geo-type",
              "description": "`geoType` the type of data object (topojson or geojson)",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "name",
              "description": "`name` the name of the property to extract from the geo data object",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "handle-as",
              "description": "[`handleAs`](https://elements.polymer-project.org/elements/iron-ajax#property-handleAs)",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "filter",
              "description": "`filter` the filter to use for filtering features\nex: function(f) {return f.id !== 10} // remove antartic from a world map",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 10
                },
                "end": {
                  "line": 79,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "for-each",
              "description": "`forEach` a function that will run for each feature\nex: function(f) {return f.properties.id = lookup(f.id) } // take lookup code",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 10
                },
                "end": {
                  "line": 88,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "feature-changed",
              "description": "Fired when the `feature` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "data-changed",
              "description": "Fired when the `data` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "topojson-feature"
        },
        {
          "description": "## TopojsonMesh\n\n`<topojson-mesh>` wrapper around [topoJSON.mesh](https://github.com/topojson/topojson-client/blob/master/README.md#mesh)\nexposes geo mesh from an url or topojson data",
          "summary": "",
          "path": "topojson/topojson-mesh.html",
          "properties": [
            {
              "name": "mesh",
              "type": "Array | null | undefined",
              "description": "`feature` the geo feature to be exposed by this component",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "url",
              "type": "string | null | undefined",
              "description": "`url` url to use for fetching geo mesh data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "data",
              "type": "Object | null | undefined",
              "description": "`data` topojson or geojson object. It is either retrieved iron-ajax or passed as an argument",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 48,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "name",
              "type": "string | null | undefined",
              "description": "`name` the name of the property to extract from the geo data object",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "handleAs",
              "type": "string | null | undefined",
              "description": "[`handleAs`](https://elements.polymer-project.org/elements/iron-ajax#property-handleAs)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"json\""
            },
            {
              "name": "filter",
              "type": "Function | null | undefined",
              "description": "`filter` filter to be used for the mesh",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_observeData",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 6
                },
                "end": {
                  "line": 87,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "data"
                },
                {
                  "name": "name"
                },
                {
                  "name": "filter"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "Polymer.Element",
          "name": "MultiChart.TopojsonMesh",
          "attributes": [
            {
              "name": "mesh",
              "description": "`feature` the geo feature to be exposed by this component",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "url",
              "description": "`url` url to use for fetching geo mesh data.",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "data",
              "description": "`data` topojson or geojson object. It is either retrieved iron-ajax or passed as an argument",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 48,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Object | null | undefined"
            },
            {
              "name": "name",
              "description": "`name` the name of the property to extract from the geo data object",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "handle-as",
              "description": "[`handleAs`](https://elements.polymer-project.org/elements/iron-ajax#property-handleAs)",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 63,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "filter",
              "description": "`filter` filter to be used for the mesh",
              "sourceRange": {
                "start": {
                  "line": 68,
                  "column": 10
                },
                "end": {
                  "line": 75,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "mesh-changed",
              "description": "Fired when the `mesh` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "data-changed",
              "description": "Fired when the `data` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "topojson-mesh"
        },
        {
          "description": "## MultiProject\n\n`<multi-project>` use `projection` to project `data` and expose it under `projectedData`",
          "summary": "",
          "path": "projection/multi-project.html",
          "properties": [
            {
              "name": "projection",
              "type": "Function | null | undefined",
              "description": "`projection` the [projection](https://github.com/d3/d3-geo#projection) generator function",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "data",
              "type": "Array | null | undefined",
              "description": "[`data`] data with points to be projected",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "projectedData",
              "type": "Array | null | undefined",
              "description": "[`data`] data with points to be projected",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 48,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "coordinateAccessorPath",
              "type": "string | null | undefined",
              "description": "`coordinateAccessorPath` path for computing the `valueAccessor` function\na value of ´key´ will generate  an accessor function like ´function(d) {return d.key}´\na value of ´+value.count´ will generate  an accessor function like ´function(d) {return +d.value.count}´",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 55,
                  "column": 10
                },
                "end": {
                  "line": 57,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "coordinateAccessor",
              "type": "Function | null | undefined",
              "description": "`coordinates` accessor function returning [x,y] coordinates from the data. Passed directly or through a coordinatePath",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 10
                },
                "end": {
                  "line": 64,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Function"
                }
              }
            },
            {
              "name": "key",
              "type": "string | null | undefined",
              "description": "`key` the key under which projected coordinates are stored",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 10
                },
                "end": {
                  "line": 72,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              },
              "defaultValue": "\"__point__\""
            }
          ],
          "methods": [
            {
              "name": "_computeProjection",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 6
                },
                "end": {
                  "line": 90,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "projection"
                },
                {
                  "name": "coordinateAccessor"
                },
                {
                  "name": "data"
                },
                {
                  "name": "key"
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 91,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "MultiChart.MultiProject",
          "attributes": [
            {
              "name": "projection",
              "description": "`projection` the [projection](https://github.com/d3/d3-geo#projection) generator function",
              "sourceRange": {
                "start": {
                  "line": 31,
                  "column": 10
                },
                "end": {
                  "line": 33,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "data",
              "description": "[`data`] data with points to be projected",
              "sourceRange": {
                "start": {
                  "line": 38,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "projected-data",
              "description": "[`data`] data with points to be projected",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 48,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "coordinate-accessor-path",
              "description": "`coordinateAccessorPath` path for computing the `valueAccessor` function\na value of ´key´ will generate  an accessor function like ´function(d) {return d.key}´\na value of ´+value.count´ will generate  an accessor function like ´function(d) {return +d.value.count}´",
              "sourceRange": {
                "start": {
                  "line": 55,
                  "column": 10
                },
                "end": {
                  "line": 57,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "coordinate-accessor",
              "description": "`coordinates` accessor function returning [x,y] coordinates from the data. Passed directly or through a coordinatePath",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 10
                },
                "end": {
                  "line": 64,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "Function | null | undefined"
            },
            {
              "name": "key",
              "description": "`key` the key under which projected coordinates are stored",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 10
                },
                "end": {
                  "line": 72,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "projected-data-changed",
              "description": "Fired when the `projectedData` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "multi-project",
          "mixins": [
            "MultiChart.mixin.PolymerExtends"
          ]
        }
      ]
    }
  ]
}
